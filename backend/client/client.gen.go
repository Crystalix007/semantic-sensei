// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ClassificationTask defines model for ClassificationTask.
type ClassificationTask struct {
	CreatedAt  time.Time            `json:"created_at"`
	Embeddings map[string]Embedding `json:"embeddings"`
	Id         int64                `json:"id"`
	LabelId    int64                `json:"label_id"`
	LlmInput   string               `json:"llm_input"`
	LlmOutput  string               `json:"llm_output"`
	ProjectId  int64                `json:"project_id"`
}

// ClassificationTaskLabel defines model for ClassificationTaskLabel.
type ClassificationTaskLabel struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int64     `json:"id"`
	Label     string    `json:"label"`
	ProjectId int64     `json:"project_id"`
}

// ClassificationTaskList defines model for ClassificationTaskList.
type ClassificationTaskList struct {
	Data  []ClassificationTask `json:"data"`
	Total uint64               `json:"total"`
}

// ClassificationTaskOrPendingClassificationTask defines model for ClassificationTaskOrPendingClassificationTask.
type ClassificationTaskOrPendingClassificationTask struct {
	union json.RawMessage
}

// CreateClassificationTask defines model for CreateClassificationTask.
type CreateClassificationTask struct {
	Embeddings map[string]Embedding `json:"embeddings"`
	LlmInput   string               `json:"llm_input"`
	LlmOutput  string               `json:"llm_output"`
}

// CreateClassificationTaskLabel defines model for CreateClassificationTaskLabel.
type CreateClassificationTaskLabel struct {
	Label string `json:"label"`
}

// CreateProject defines model for CreateProject.
type CreateProject struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Embedding defines model for Embedding.
type Embedding = []byte

// LabelTask defines model for LabelTask.
type LabelTask struct {
	Label int64 `json:"label"`
}

// Location defines model for Location.
type Location = string

// PendingClassificationTask defines model for PendingClassificationTask.
type PendingClassificationTask struct {
	CreatedAt  time.Time            `json:"created_at"`
	Embeddings map[string]Embedding `json:"embeddings"`
	Id         int64                `json:"id"`
	LlmInput   string               `json:"llm_input"`
	LlmOutput  string               `json:"llm_output"`
	ProjectId  int64                `json:"project_id"`
}

// PendingClassificationTaskList defines model for PendingClassificationTaskList.
type PendingClassificationTaskList struct {
	Data  []PendingClassificationTask `json:"data"`
	Total uint64                      `json:"total"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt   time.Time                  `json:"created_at"`
	Description string                     `json:"description"`
	Id          int64                      `json:"id"`
	Labels      *[]ClassificationTaskLabel `json:"labels,omitempty"`
	Name        string                     `json:"name"`
}

// Projects defines model for Projects.
type Projects struct {
	Projects *[]Project `json:"projects,omitempty"`
}

// Page defines model for Page.
type Page = uint64

// PageSize defines model for PageSize.
type PageSize = uint64

// GetProjectProjectIdClassificationTasksParams defines parameters for GetProjectProjectIdClassificationTasks.
type GetProjectProjectIdClassificationTasksParams struct {
	// Page The page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of results per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetProjectProjectIdPendingClassificationTasksParams defines parameters for GetProjectProjectIdPendingClassificationTasks.
type GetProjectProjectIdPendingClassificationTasksParams struct {
	// Page The page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of results per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PostProjectFormdataRequestBody defines body for PostProject for application/x-www-form-urlencoded ContentType.
type PostProjectFormdataRequestBody = CreateProject

// PostProjectProjectIdClassificationTaskJSONRequestBody defines body for PostProjectProjectIdClassificationTask for application/json ContentType.
type PostProjectProjectIdClassificationTaskJSONRequestBody = CreateClassificationTask

// PostProjectProjectIdClassificationTaskFormdataRequestBody defines body for PostProjectProjectIdClassificationTask for application/x-www-form-urlencoded ContentType.
type PostProjectProjectIdClassificationTaskFormdataRequestBody = CreateClassificationTask

// PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody defines body for PostProjectProjectIdClassificationTaskIdLabel for application/x-www-form-urlencoded ContentType.
type PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody = LabelTask

// PostProjectProjectIdClassificationTaskLabelFormdataRequestBody defines body for PostProjectProjectIdClassificationTaskLabel for application/x-www-form-urlencoded ContentType.
type PostProjectProjectIdClassificationTaskLabelFormdataRequestBody = CreateClassificationTaskLabel

// AsPendingClassificationTask returns the union data inside the ClassificationTaskOrPendingClassificationTask as a PendingClassificationTask
func (t ClassificationTaskOrPendingClassificationTask) AsPendingClassificationTask() (PendingClassificationTask, error) {
	var body PendingClassificationTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPendingClassificationTask overwrites any union data inside the ClassificationTaskOrPendingClassificationTask as the provided PendingClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) FromPendingClassificationTask(v PendingClassificationTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePendingClassificationTask performs a merge with any union data inside the ClassificationTaskOrPendingClassificationTask, using the provided PendingClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) MergePendingClassificationTask(v PendingClassificationTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClassificationTask returns the union data inside the ClassificationTaskOrPendingClassificationTask as a ClassificationTask
func (t ClassificationTaskOrPendingClassificationTask) AsClassificationTask() (ClassificationTask, error) {
	var body ClassificationTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClassificationTask overwrites any union data inside the ClassificationTaskOrPendingClassificationTask as the provided ClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) FromClassificationTask(v ClassificationTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClassificationTask performs a merge with any union data inside the ClassificationTaskOrPendingClassificationTask, using the provided ClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) MergeClassificationTask(v ClassificationTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClassificationTaskOrPendingClassificationTask) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ClassificationTaskOrPendingClassificationTask) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOpenapiJson request
	GetOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectWithBody request with any body
	PostProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectWithFormdataBody(ctx context.Context, body PostProjectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectId request
	GetProjectId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectProjectIdClassificationTaskWithBody request with any body
	PostProjectProjectIdClassificationTaskWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectProjectIdClassificationTask(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectProjectIdClassificationTaskWithFormdataBody(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectProjectIdClassificationTaskId request
	GetProjectProjectIdClassificationTaskId(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectProjectIdClassificationTaskIdLabelWithBody request with any body
	PostProjectProjectIdClassificationTaskIdLabelWithBody(ctx context.Context, projectId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectProjectIdClassificationTaskIdLabelWithFormdataBody(ctx context.Context, projectId int64, id int64, body PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectProjectIdClassificationTaskLabelWithBody request with any body
	PostProjectProjectIdClassificationTaskLabelWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProjectProjectIdClassificationTaskLabelWithFormdataBody(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectProjectIdClassificationTaskLabelId request
	GetProjectProjectIdClassificationTaskLabelId(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectProjectIdClassificationTasks request
	GetProjectProjectIdClassificationTasks(ctx context.Context, projectId int64, params *GetProjectProjectIdClassificationTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectProjectIdPendingClassificationTasks request
	GetProjectProjectIdPendingClassificationTasks(ctx context.Context, projectId int64, params *GetProjectProjectIdPendingClassificationTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectWithFormdataBody(ctx context.Context, body PostProjectFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTaskWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTask(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTaskWithFormdataBody(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskRequestWithFormdataBody(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectProjectIdClassificationTaskId(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectProjectIdClassificationTaskIdRequest(c.Server, projectId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTaskIdLabelWithBody(ctx context.Context, projectId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskIdLabelRequestWithBody(c.Server, projectId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTaskIdLabelWithFormdataBody(ctx context.Context, projectId int64, id int64, body PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskIdLabelRequestWithFormdataBody(c.Server, projectId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTaskLabelWithBody(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskLabelRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectProjectIdClassificationTaskLabelWithFormdataBody(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectProjectIdClassificationTaskLabelRequestWithFormdataBody(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectProjectIdClassificationTaskLabelId(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectProjectIdClassificationTaskLabelIdRequest(c.Server, projectId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectProjectIdClassificationTasks(ctx context.Context, projectId int64, params *GetProjectProjectIdClassificationTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectProjectIdClassificationTasksRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectProjectIdPendingClassificationTasks(ctx context.Context, projectId int64, params *GetProjectProjectIdPendingClassificationTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectProjectIdPendingClassificationTasksRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOpenapiJsonRequest generates requests for GetOpenapiJson
func NewGetOpenapiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectRequestWithFormdataBody calls the generic PostProject builder with application/x-www-form-urlencoded body
func NewPostProjectRequestWithFormdataBody(server string, body PostProjectFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostProjectRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostProjectRequestWithBody generates requests for PostProject with any type of body
func NewPostProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectIdRequest generates requests for GetProjectId
func NewGetProjectIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectProjectIdClassificationTaskRequest calls the generic PostProjectProjectIdClassificationTask builder with application/json body
func NewPostProjectProjectIdClassificationTaskRequest(server string, projectId int64, body PostProjectProjectIdClassificationTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProjectProjectIdClassificationTaskRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewPostProjectProjectIdClassificationTaskRequestWithFormdataBody calls the generic PostProjectProjectIdClassificationTask builder with application/x-www-form-urlencoded body
func NewPostProjectProjectIdClassificationTaskRequestWithFormdataBody(server string, projectId int64, body PostProjectProjectIdClassificationTaskFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostProjectProjectIdClassificationTaskRequestWithBody(server, projectId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostProjectProjectIdClassificationTaskRequestWithBody generates requests for PostProjectProjectIdClassificationTask with any type of body
func NewPostProjectProjectIdClassificationTaskRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/classification_task", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectProjectIdClassificationTaskIdRequest generates requests for GetProjectProjectIdClassificationTaskId
func NewGetProjectProjectIdClassificationTaskIdRequest(server string, projectId int64, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/classification_task/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProjectProjectIdClassificationTaskIdLabelRequestWithFormdataBody calls the generic PostProjectProjectIdClassificationTaskIdLabel builder with application/x-www-form-urlencoded body
func NewPostProjectProjectIdClassificationTaskIdLabelRequestWithFormdataBody(server string, projectId int64, id int64, body PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostProjectProjectIdClassificationTaskIdLabelRequestWithBody(server, projectId, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostProjectProjectIdClassificationTaskIdLabelRequestWithBody generates requests for PostProjectProjectIdClassificationTaskIdLabel with any type of body
func NewPostProjectProjectIdClassificationTaskIdLabelRequestWithBody(server string, projectId int64, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/classification_task/%s/label", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectProjectIdClassificationTaskLabelRequestWithFormdataBody calls the generic PostProjectProjectIdClassificationTaskLabel builder with application/x-www-form-urlencoded body
func NewPostProjectProjectIdClassificationTaskLabelRequestWithFormdataBody(server string, projectId int64, body PostProjectProjectIdClassificationTaskLabelFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostProjectProjectIdClassificationTaskLabelRequestWithBody(server, projectId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostProjectProjectIdClassificationTaskLabelRequestWithBody generates requests for PostProjectProjectIdClassificationTaskLabel with any type of body
func NewPostProjectProjectIdClassificationTaskLabelRequestWithBody(server string, projectId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/classification_task_label", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectProjectIdClassificationTaskLabelIdRequest generates requests for GetProjectProjectIdClassificationTaskLabelId
func NewGetProjectProjectIdClassificationTaskLabelIdRequest(server string, projectId int64, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/classification_task_label/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectProjectIdClassificationTasksRequest generates requests for GetProjectProjectIdClassificationTasks
func NewGetProjectProjectIdClassificationTasksRequest(server string, projectId int64, params *GetProjectProjectIdClassificationTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/classification_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectProjectIdPendingClassificationTasksRequest generates requests for GetProjectProjectIdPendingClassificationTasks
func NewGetProjectProjectIdPendingClassificationTasksRequest(server string, projectId int64, params *GetProjectProjectIdPendingClassificationTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s/pending_classification_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOpenapiJsonWithResponse request
	GetOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiJsonResponse, error)

	// PostProjectWithBodyWithResponse request with any body
	PostProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectResponse, error)

	PostProjectWithFormdataBodyWithResponse(ctx context.Context, body PostProjectFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectResponse, error)

	// GetProjectIdWithResponse request
	GetProjectIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error)

	// PostProjectProjectIdClassificationTaskWithBodyWithResponse request with any body
	PostProjectProjectIdClassificationTaskWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskResponse, error)

	PostProjectProjectIdClassificationTaskWithResponse(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskResponse, error)

	PostProjectProjectIdClassificationTaskWithFormdataBodyWithResponse(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskResponse, error)

	// GetProjectProjectIdClassificationTaskIdWithResponse request
	GetProjectProjectIdClassificationTaskIdWithResponse(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*GetProjectProjectIdClassificationTaskIdResponse, error)

	// PostProjectProjectIdClassificationTaskIdLabelWithBodyWithResponse request with any body
	PostProjectProjectIdClassificationTaskIdLabelWithBodyWithResponse(ctx context.Context, projectId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskIdLabelResponse, error)

	PostProjectProjectIdClassificationTaskIdLabelWithFormdataBodyWithResponse(ctx context.Context, projectId int64, id int64, body PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskIdLabelResponse, error)

	// PostProjectProjectIdClassificationTaskLabelWithBodyWithResponse request with any body
	PostProjectProjectIdClassificationTaskLabelWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskLabelResponse, error)

	PostProjectProjectIdClassificationTaskLabelWithFormdataBodyWithResponse(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskLabelResponse, error)

	// GetProjectProjectIdClassificationTaskLabelIdWithResponse request
	GetProjectProjectIdClassificationTaskLabelIdWithResponse(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*GetProjectProjectIdClassificationTaskLabelIdResponse, error)

	// GetProjectProjectIdClassificationTasksWithResponse request
	GetProjectProjectIdClassificationTasksWithResponse(ctx context.Context, projectId int64, params *GetProjectProjectIdClassificationTasksParams, reqEditors ...RequestEditorFn) (*GetProjectProjectIdClassificationTasksResponse, error)

	// GetProjectProjectIdPendingClassificationTasksWithResponse request
	GetProjectProjectIdPendingClassificationTasksWithResponse(ctx context.Context, projectId int64, params *GetProjectProjectIdPendingClassificationTasksParams, reqEditors ...RequestEditorFn) (*GetProjectProjectIdPendingClassificationTasksResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)
}

type GetOpenapiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi3.T
}

// Status returns HTTPResponse.Status
func (r GetOpenapiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r PostProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r GetProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectProjectIdClassificationTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PendingClassificationTask
}

// Status returns HTTPResponse.Status
func (r PostProjectProjectIdClassificationTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectProjectIdClassificationTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectProjectIdClassificationTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClassificationTaskOrPendingClassificationTask
}

// Status returns HTTPResponse.Status
func (r GetProjectProjectIdClassificationTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectProjectIdClassificationTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectProjectIdClassificationTaskIdLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClassificationTask
}

// Status returns HTTPResponse.Status
func (r PostProjectProjectIdClassificationTaskIdLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectProjectIdClassificationTaskIdLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectProjectIdClassificationTaskLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ClassificationTaskLabel
}

// Status returns HTTPResponse.Status
func (r PostProjectProjectIdClassificationTaskLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectProjectIdClassificationTaskLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectProjectIdClassificationTaskLabelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClassificationTaskLabel
}

// Status returns HTTPResponse.Status
func (r GetProjectProjectIdClassificationTaskLabelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectProjectIdClassificationTaskLabelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectProjectIdClassificationTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClassificationTaskList
}

// Status returns HTTPResponse.Status
func (r GetProjectProjectIdClassificationTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectProjectIdClassificationTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectProjectIdPendingClassificationTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PendingClassificationTaskList
}

// Status returns HTTPResponse.Status
func (r GetProjectProjectIdPendingClassificationTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectProjectIdPendingClassificationTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOpenapiJsonWithResponse request returning *GetOpenapiJsonResponse
func (c *ClientWithResponses) GetOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiJsonResponse, error) {
	rsp, err := c.GetOpenapiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiJsonResponse(rsp)
}

// PostProjectWithBodyWithResponse request with arbitrary body returning *PostProjectResponse
func (c *ClientWithResponses) PostProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectResponse, error) {
	rsp, err := c.PostProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectResponse(rsp)
}

func (c *ClientWithResponses) PostProjectWithFormdataBodyWithResponse(ctx context.Context, body PostProjectFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectResponse, error) {
	rsp, err := c.PostProjectWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectResponse(rsp)
}

// GetProjectIdWithResponse request returning *GetProjectIdResponse
func (c *ClientWithResponses) GetProjectIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error) {
	rsp, err := c.GetProjectId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectIdResponse(rsp)
}

// PostProjectProjectIdClassificationTaskWithBodyWithResponse request with arbitrary body returning *PostProjectProjectIdClassificationTaskResponse
func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTaskWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskResponse(rsp)
}

func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskWithResponse(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTask(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskResponse(rsp)
}

func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskWithFormdataBodyWithResponse(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTaskWithFormdataBody(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskResponse(rsp)
}

// GetProjectProjectIdClassificationTaskIdWithResponse request returning *GetProjectProjectIdClassificationTaskIdResponse
func (c *ClientWithResponses) GetProjectProjectIdClassificationTaskIdWithResponse(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*GetProjectProjectIdClassificationTaskIdResponse, error) {
	rsp, err := c.GetProjectProjectIdClassificationTaskId(ctx, projectId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectProjectIdClassificationTaskIdResponse(rsp)
}

// PostProjectProjectIdClassificationTaskIdLabelWithBodyWithResponse request with arbitrary body returning *PostProjectProjectIdClassificationTaskIdLabelResponse
func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskIdLabelWithBodyWithResponse(ctx context.Context, projectId int64, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskIdLabelResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTaskIdLabelWithBody(ctx, projectId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskIdLabelResponse(rsp)
}

func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskIdLabelWithFormdataBodyWithResponse(ctx context.Context, projectId int64, id int64, body PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskIdLabelResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTaskIdLabelWithFormdataBody(ctx, projectId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskIdLabelResponse(rsp)
}

// PostProjectProjectIdClassificationTaskLabelWithBodyWithResponse request with arbitrary body returning *PostProjectProjectIdClassificationTaskLabelResponse
func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskLabelWithBodyWithResponse(ctx context.Context, projectId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskLabelResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTaskLabelWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskLabelResponse(rsp)
}

func (c *ClientWithResponses) PostProjectProjectIdClassificationTaskLabelWithFormdataBodyWithResponse(ctx context.Context, projectId int64, body PostProjectProjectIdClassificationTaskLabelFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProjectProjectIdClassificationTaskLabelResponse, error) {
	rsp, err := c.PostProjectProjectIdClassificationTaskLabelWithFormdataBody(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectProjectIdClassificationTaskLabelResponse(rsp)
}

// GetProjectProjectIdClassificationTaskLabelIdWithResponse request returning *GetProjectProjectIdClassificationTaskLabelIdResponse
func (c *ClientWithResponses) GetProjectProjectIdClassificationTaskLabelIdWithResponse(ctx context.Context, projectId int64, id int64, reqEditors ...RequestEditorFn) (*GetProjectProjectIdClassificationTaskLabelIdResponse, error) {
	rsp, err := c.GetProjectProjectIdClassificationTaskLabelId(ctx, projectId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectProjectIdClassificationTaskLabelIdResponse(rsp)
}

// GetProjectProjectIdClassificationTasksWithResponse request returning *GetProjectProjectIdClassificationTasksResponse
func (c *ClientWithResponses) GetProjectProjectIdClassificationTasksWithResponse(ctx context.Context, projectId int64, params *GetProjectProjectIdClassificationTasksParams, reqEditors ...RequestEditorFn) (*GetProjectProjectIdClassificationTasksResponse, error) {
	rsp, err := c.GetProjectProjectIdClassificationTasks(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectProjectIdClassificationTasksResponse(rsp)
}

// GetProjectProjectIdPendingClassificationTasksWithResponse request returning *GetProjectProjectIdPendingClassificationTasksResponse
func (c *ClientWithResponses) GetProjectProjectIdPendingClassificationTasksWithResponse(ctx context.Context, projectId int64, params *GetProjectProjectIdPendingClassificationTasksParams, reqEditors ...RequestEditorFn) (*GetProjectProjectIdPendingClassificationTasksResponse, error) {
	rsp, err := c.GetProjectProjectIdPendingClassificationTasks(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectProjectIdPendingClassificationTasksResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// ParseGetOpenapiJsonResponse parses an HTTP response from a GetOpenapiJsonWithResponse call
func ParseGetOpenapiJsonResponse(rsp *http.Response) (*GetOpenapiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi3.T
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectResponse parses an HTTP response from a PostProjectWithResponse call
func ParsePostProjectResponse(rsp *http.Response) (*PostProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProjectIdResponse parses an HTTP response from a GetProjectIdWithResponse call
func ParseGetProjectIdResponse(rsp *http.Response) (*GetProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectProjectIdClassificationTaskResponse parses an HTTP response from a PostProjectProjectIdClassificationTaskWithResponse call
func ParsePostProjectProjectIdClassificationTaskResponse(rsp *http.Response) (*PostProjectProjectIdClassificationTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectProjectIdClassificationTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PendingClassificationTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProjectProjectIdClassificationTaskIdResponse parses an HTTP response from a GetProjectProjectIdClassificationTaskIdWithResponse call
func ParseGetProjectProjectIdClassificationTaskIdResponse(rsp *http.Response) (*GetProjectProjectIdClassificationTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectProjectIdClassificationTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClassificationTaskOrPendingClassificationTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectProjectIdClassificationTaskIdLabelResponse parses an HTTP response from a PostProjectProjectIdClassificationTaskIdLabelWithResponse call
func ParsePostProjectProjectIdClassificationTaskIdLabelResponse(rsp *http.Response) (*PostProjectProjectIdClassificationTaskIdLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectProjectIdClassificationTaskIdLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClassificationTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectProjectIdClassificationTaskLabelResponse parses an HTTP response from a PostProjectProjectIdClassificationTaskLabelWithResponse call
func ParsePostProjectProjectIdClassificationTaskLabelResponse(rsp *http.Response) (*PostProjectProjectIdClassificationTaskLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectProjectIdClassificationTaskLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ClassificationTaskLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProjectProjectIdClassificationTaskLabelIdResponse parses an HTTP response from a GetProjectProjectIdClassificationTaskLabelIdWithResponse call
func ParseGetProjectProjectIdClassificationTaskLabelIdResponse(rsp *http.Response) (*GetProjectProjectIdClassificationTaskLabelIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectProjectIdClassificationTaskLabelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClassificationTaskLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectProjectIdClassificationTasksResponse parses an HTTP response from a GetProjectProjectIdClassificationTasksWithResponse call
func ParseGetProjectProjectIdClassificationTasksResponse(rsp *http.Response) (*GetProjectProjectIdClassificationTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectProjectIdClassificationTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClassificationTaskList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectProjectIdPendingClassificationTasksResponse parses an HTTP response from a GetProjectProjectIdPendingClassificationTasksWithResponse call
func ParseGetProjectProjectIdPendingClassificationTasksResponse(rsp *http.Response) (*GetProjectProjectIdPendingClassificationTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectProjectIdPendingClassificationTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PendingClassificationTaskList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

type ConflictResponseHeaders struct {
	Location Location
}
type ConflictResponse struct {
	Headers ConflictResponseHeaders
}

type RedirectResponseHeaders struct {
	Location Location
}
type RedirectResponse struct {
	Headers RedirectResponseHeaders
}
