// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ClassificationTask defines model for ClassificationTask.
type ClassificationTask struct {
	CreatedAt  time.Time            `json:"created_at"`
	Embeddings map[string]Embedding `json:"embeddings"`
	Id         int64                `json:"id"`
	LabelId    int64                `json:"label_id"`
	LlmInput   string               `json:"llm_input"`
	LlmOutput  string               `json:"llm_output"`
	ProjectId  int64                `json:"project_id"`
}

// ClassificationTaskLabel defines model for ClassificationTaskLabel.
type ClassificationTaskLabel struct {
	CreatedAt time.Time `json:"created_at"`
	Id        int64     `json:"id"`
	Label     string    `json:"label"`
	ProjectId int64     `json:"project_id"`
}

// ClassificationTaskList defines model for ClassificationTaskList.
type ClassificationTaskList struct {
	Data  []ClassificationTask `json:"data"`
	Total uint64               `json:"total"`
}

// ClassificationTaskOrPendingClassificationTask defines model for ClassificationTaskOrPendingClassificationTask.
type ClassificationTaskOrPendingClassificationTask struct {
	union json.RawMessage
}

// CreateClassificationTask defines model for CreateClassificationTask.
type CreateClassificationTask struct {
	Embeddings map[string]Embedding `json:"embeddings"`
	LlmInput   string               `json:"llm_input"`
	LlmOutput  string               `json:"llm_output"`
}

// CreateClassificationTaskLabel defines model for CreateClassificationTaskLabel.
type CreateClassificationTaskLabel struct {
	Label string `json:"label"`
}

// CreateProject defines model for CreateProject.
type CreateProject struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Embedding defines model for Embedding.
type Embedding = []byte

// LabelTask defines model for LabelTask.
type LabelTask struct {
	Label int64 `json:"label"`
}

// Location defines model for Location.
type Location = string

// PendingClassificationTask defines model for PendingClassificationTask.
type PendingClassificationTask struct {
	CreatedAt  time.Time            `json:"created_at"`
	Embeddings map[string]Embedding `json:"embeddings"`
	Id         int64                `json:"id"`
	LlmInput   string               `json:"llm_input"`
	LlmOutput  string               `json:"llm_output"`
	ProjectId  int64                `json:"project_id"`
}

// PendingClassificationTaskList defines model for PendingClassificationTaskList.
type PendingClassificationTaskList struct {
	Data  []PendingClassificationTask `json:"data"`
	Total uint64                      `json:"total"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt   time.Time                  `json:"created_at"`
	Description string                     `json:"description"`
	Id          int64                      `json:"id"`
	Labels      *[]ClassificationTaskLabel `json:"labels,omitempty"`
	Name        string                     `json:"name"`
}

// Projects defines model for Projects.
type Projects struct {
	Projects *[]Project `json:"projects,omitempty"`
}

// Page defines model for Page.
type Page = uint64

// PageSize defines model for PageSize.
type PageSize = uint64

// GetProjectProjectIdClassificationTasksParams defines parameters for GetProjectProjectIdClassificationTasks.
type GetProjectProjectIdClassificationTasksParams struct {
	// Page The page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of results per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetProjectProjectIdPendingClassificationTasksParams defines parameters for GetProjectProjectIdPendingClassificationTasks.
type GetProjectProjectIdPendingClassificationTasksParams struct {
	// Page The page number
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of results per page
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PostProjectFormdataRequestBody defines body for PostProject for application/x-www-form-urlencoded ContentType.
type PostProjectFormdataRequestBody = CreateProject

// PostProjectProjectIdClassificationTaskJSONRequestBody defines body for PostProjectProjectIdClassificationTask for application/json ContentType.
type PostProjectProjectIdClassificationTaskJSONRequestBody = CreateClassificationTask

// PostProjectProjectIdClassificationTaskFormdataRequestBody defines body for PostProjectProjectIdClassificationTask for application/x-www-form-urlencoded ContentType.
type PostProjectProjectIdClassificationTaskFormdataRequestBody = CreateClassificationTask

// PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody defines body for PostProjectProjectIdClassificationTaskIdLabel for application/x-www-form-urlencoded ContentType.
type PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody = LabelTask

// PostProjectProjectIdClassificationTaskLabelFormdataRequestBody defines body for PostProjectProjectIdClassificationTaskLabel for application/x-www-form-urlencoded ContentType.
type PostProjectProjectIdClassificationTaskLabelFormdataRequestBody = CreateClassificationTaskLabel

// AsPendingClassificationTask returns the union data inside the ClassificationTaskOrPendingClassificationTask as a PendingClassificationTask
func (t ClassificationTaskOrPendingClassificationTask) AsPendingClassificationTask() (PendingClassificationTask, error) {
	var body PendingClassificationTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPendingClassificationTask overwrites any union data inside the ClassificationTaskOrPendingClassificationTask as the provided PendingClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) FromPendingClassificationTask(v PendingClassificationTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePendingClassificationTask performs a merge with any union data inside the ClassificationTaskOrPendingClassificationTask, using the provided PendingClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) MergePendingClassificationTask(v PendingClassificationTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClassificationTask returns the union data inside the ClassificationTaskOrPendingClassificationTask as a ClassificationTask
func (t ClassificationTaskOrPendingClassificationTask) AsClassificationTask() (ClassificationTask, error) {
	var body ClassificationTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClassificationTask overwrites any union data inside the ClassificationTaskOrPendingClassificationTask as the provided ClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) FromClassificationTask(v ClassificationTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClassificationTask performs a merge with any union data inside the ClassificationTaskOrPendingClassificationTask, using the provided ClassificationTask
func (t *ClassificationTaskOrPendingClassificationTask) MergeClassificationTask(v ClassificationTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClassificationTaskOrPendingClassificationTask) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ClassificationTaskOrPendingClassificationTask) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /openapi.json)
	GetOpenapiJson(w http.ResponseWriter, r *http.Request)

	// (POST /project)
	PostProject(w http.ResponseWriter, r *http.Request)

	// (GET /project/{id})
	GetProjectId(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /project/{project_id}/classification_task)
	PostProjectProjectIdClassificationTask(w http.ResponseWriter, r *http.Request, projectId int64)

	// (GET /project/{project_id}/classification_task/{id})
	GetProjectProjectIdClassificationTaskId(w http.ResponseWriter, r *http.Request, projectId int64, id int64)

	// (POST /project/{project_id}/classification_task/{id}/label)
	PostProjectProjectIdClassificationTaskIdLabel(w http.ResponseWriter, r *http.Request, projectId int64, id int64)

	// (POST /project/{project_id}/classification_task_label)
	PostProjectProjectIdClassificationTaskLabel(w http.ResponseWriter, r *http.Request, projectId int64)

	// (GET /project/{project_id}/classification_task_label/{id})
	GetProjectProjectIdClassificationTaskLabelId(w http.ResponseWriter, r *http.Request, projectId int64, id int64)

	// (GET /project/{project_id}/classification_tasks)
	GetProjectProjectIdClassificationTasks(w http.ResponseWriter, r *http.Request, projectId int64, params GetProjectProjectIdClassificationTasksParams)

	// (GET /project/{project_id}/pending_classification_tasks)
	GetProjectProjectIdPendingClassificationTasks(w http.ResponseWriter, r *http.Request, projectId int64, params GetProjectProjectIdPendingClassificationTasksParams)

	// (GET /projects)
	GetProjects(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /openapi.json)
func (_ Unimplemented) GetOpenapiJson(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /project)
func (_ Unimplemented) PostProject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /project/{id})
func (_ Unimplemented) GetProjectId(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /project/{project_id}/classification_task)
func (_ Unimplemented) PostProjectProjectIdClassificationTask(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /project/{project_id}/classification_task/{id})
func (_ Unimplemented) GetProjectProjectIdClassificationTaskId(w http.ResponseWriter, r *http.Request, projectId int64, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /project/{project_id}/classification_task/{id}/label)
func (_ Unimplemented) PostProjectProjectIdClassificationTaskIdLabel(w http.ResponseWriter, r *http.Request, projectId int64, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /project/{project_id}/classification_task_label)
func (_ Unimplemented) PostProjectProjectIdClassificationTaskLabel(w http.ResponseWriter, r *http.Request, projectId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /project/{project_id}/classification_task_label/{id})
func (_ Unimplemented) GetProjectProjectIdClassificationTaskLabelId(w http.ResponseWriter, r *http.Request, projectId int64, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /project/{project_id}/classification_tasks)
func (_ Unimplemented) GetProjectProjectIdClassificationTasks(w http.ResponseWriter, r *http.Request, projectId int64, params GetProjectProjectIdClassificationTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /project/{project_id}/pending_classification_tasks)
func (_ Unimplemented) GetProjectProjectIdPendingClassificationTasks(w http.ResponseWriter, r *http.Request, projectId int64, params GetProjectProjectIdPendingClassificationTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /projects)
func (_ Unimplemented) GetProjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOpenapiJson operation middleware
func (siw *ServerInterfaceWrapper) GetOpenapiJson(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenapiJson(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProject operation middleware
func (siw *ServerInterfaceWrapper) PostProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectProjectIdClassificationTask operation middleware
func (siw *ServerInterfaceWrapper) PostProjectProjectIdClassificationTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectProjectIdClassificationTask(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectIdClassificationTaskId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectIdClassificationTaskId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectIdClassificationTaskId(w, r, projectId, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectProjectIdClassificationTaskIdLabel operation middleware
func (siw *ServerInterfaceWrapper) PostProjectProjectIdClassificationTaskIdLabel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectProjectIdClassificationTaskIdLabel(w, r, projectId, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostProjectProjectIdClassificationTaskLabel operation middleware
func (siw *ServerInterfaceWrapper) PostProjectProjectIdClassificationTaskLabel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostProjectProjectIdClassificationTaskLabel(w, r, projectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectIdClassificationTaskLabelId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectIdClassificationTaskLabelId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectIdClassificationTaskLabelId(w, r, projectId, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectIdClassificationTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectIdClassificationTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectProjectIdClassificationTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectIdClassificationTasks(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjectProjectIdPendingClassificationTasks operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectIdPendingClassificationTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project_id" -------------
	var projectId int64

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", chi.URLParam(r, "project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectProjectIdPendingClassificationTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjectProjectIdPendingClassificationTasks(w, r, projectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/openapi.json", wrapper.GetOpenapiJson)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project", wrapper.PostProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{id}", wrapper.GetProjectId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{project_id}/classification_task", wrapper.PostProjectProjectIdClassificationTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}/classification_task/{id}", wrapper.GetProjectProjectIdClassificationTaskId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{project_id}/classification_task/{id}/label", wrapper.PostProjectProjectIdClassificationTaskIdLabel)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/project/{project_id}/classification_task_label", wrapper.PostProjectProjectIdClassificationTaskLabel)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}/classification_task_label/{id}", wrapper.GetProjectProjectIdClassificationTaskLabelId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}/classification_tasks", wrapper.GetProjectProjectIdClassificationTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/project/{project_id}/pending_classification_tasks", wrapper.GetProjectProjectIdPendingClassificationTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.GetProjects)
	})

	return r
}

type ConflictResponseHeaders struct {
	Location Location
}
type ConflictResponse struct {
	Headers ConflictResponseHeaders
}

type RedirectResponseHeaders struct {
	Location Location
}
type RedirectResponse struct {
	Headers RedirectResponseHeaders
}

type GetOpenapiJsonRequestObject struct {
}

type GetOpenapiJsonResponseObject interface {
	VisitGetOpenapiJsonResponse(w http.ResponseWriter) error
}

type GetOpenapiJson200JSONResponse openapi3.T

func (response GetOpenapiJson200JSONResponse) VisitGetOpenapiJsonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectRequestObject struct {
	Body *PostProjectFormdataRequestBody
}

type PostProjectResponseObject interface {
	VisitPostProjectResponse(w http.ResponseWriter) error
}

type PostProject201JSONResponse = Project

func (response PostProject201JSONResponse) VisitPostProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostProject303Response = RedirectResponse

func (response PostProject303Response) VisitPostProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type GetProjectIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetProjectIdResponseObject interface {
	VisitGetProjectIdResponse(w http.ResponseWriter) error
}

type GetProjectId200JSONResponse = Project

func (response GetProjectId200JSONResponse) VisitGetProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectId404Response struct {
}

func (response GetProjectId404Response) VisitGetProjectIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostProjectProjectIdClassificationTaskRequestObject struct {
	ProjectId    int64 `json:"project_id"`
	JSONBody     *PostProjectProjectIdClassificationTaskJSONRequestBody
	FormdataBody *PostProjectProjectIdClassificationTaskFormdataRequestBody
}

type PostProjectProjectIdClassificationTaskResponseObject interface {
	VisitPostProjectProjectIdClassificationTaskResponse(w http.ResponseWriter) error
}

type PostProjectProjectIdClassificationTask201JSONResponse = PendingClassificationTask

func (response PostProjectProjectIdClassificationTask201JSONResponse) VisitPostProjectProjectIdClassificationTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectIdClassificationTask303Response = RedirectResponse

func (response PostProjectProjectIdClassificationTask303Response) VisitPostProjectProjectIdClassificationTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostProjectProjectIdClassificationTask409Response = ConflictResponse

func (response PostProjectProjectIdClassificationTask409Response) VisitPostProjectProjectIdClassificationTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(409)
	return nil
}

type GetProjectProjectIdClassificationTaskIdRequestObject struct {
	ProjectId int64 `json:"project_id"`
	Id        int64 `json:"id"`
}

type GetProjectProjectIdClassificationTaskIdResponseObject interface {
	VisitGetProjectProjectIdClassificationTaskIdResponse(w http.ResponseWriter) error
}

type GetProjectProjectIdClassificationTaskId200JSONResponse = ClassificationTaskOrPendingClassificationTask

func (response GetProjectProjectIdClassificationTaskId200JSONResponse) VisitGetProjectProjectIdClassificationTaskIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectIdClassificationTaskId404Response struct {
}

func (response GetProjectProjectIdClassificationTaskId404Response) VisitGetProjectProjectIdClassificationTaskIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostProjectProjectIdClassificationTaskIdLabelRequestObject struct {
	ProjectId int64 `json:"project_id"`
	Id        int64 `json:"id"`
	Body      *PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody
}

type PostProjectProjectIdClassificationTaskIdLabelResponseObject interface {
	VisitPostProjectProjectIdClassificationTaskIdLabelResponse(w http.ResponseWriter) error
}

type PostProjectProjectIdClassificationTaskIdLabel200JSONResponse = ClassificationTask

func (response PostProjectProjectIdClassificationTaskIdLabel200JSONResponse) VisitPostProjectProjectIdClassificationTaskIdLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectIdClassificationTaskIdLabel303Response = RedirectResponse

func (response PostProjectProjectIdClassificationTaskIdLabel303Response) VisitPostProjectProjectIdClassificationTaskIdLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostProjectProjectIdClassificationTaskIdLabel404Response struct {
}

func (response PostProjectProjectIdClassificationTaskIdLabel404Response) VisitPostProjectProjectIdClassificationTaskIdLabelResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostProjectProjectIdClassificationTaskLabelRequestObject struct {
	ProjectId int64 `json:"project_id"`
	Body      *PostProjectProjectIdClassificationTaskLabelFormdataRequestBody
}

type PostProjectProjectIdClassificationTaskLabelResponseObject interface {
	VisitPostProjectProjectIdClassificationTaskLabelResponse(w http.ResponseWriter) error
}

type PostProjectProjectIdClassificationTaskLabel201JSONResponse = ClassificationTaskLabel

func (response PostProjectProjectIdClassificationTaskLabel201JSONResponse) VisitPostProjectProjectIdClassificationTaskLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectProjectIdClassificationTaskLabel303Response = RedirectResponse

func (response PostProjectProjectIdClassificationTaskLabel303Response) VisitPostProjectProjectIdClassificationTaskLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type GetProjectProjectIdClassificationTaskLabelIdRequestObject struct {
	ProjectId int64 `json:"project_id"`
	Id        int64 `json:"id"`
}

type GetProjectProjectIdClassificationTaskLabelIdResponseObject interface {
	VisitGetProjectProjectIdClassificationTaskLabelIdResponse(w http.ResponseWriter) error
}

type GetProjectProjectIdClassificationTaskLabelId200JSONResponse = ClassificationTaskLabel

func (response GetProjectProjectIdClassificationTaskLabelId200JSONResponse) VisitGetProjectProjectIdClassificationTaskLabelIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectIdClassificationTaskLabelId404Response struct {
}

func (response GetProjectProjectIdClassificationTaskLabelId404Response) VisitGetProjectProjectIdClassificationTaskLabelIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProjectProjectIdClassificationTasksRequestObject struct {
	ProjectId int64 `json:"project_id"`
	Params    GetProjectProjectIdClassificationTasksParams
}

type GetProjectProjectIdClassificationTasksResponseObject interface {
	VisitGetProjectProjectIdClassificationTasksResponse(w http.ResponseWriter) error
}

type GetProjectProjectIdClassificationTasks200JSONResponse = ClassificationTaskList

func (response GetProjectProjectIdClassificationTasks200JSONResponse) VisitGetProjectProjectIdClassificationTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectIdClassificationTasks404Response struct {
}

func (response GetProjectProjectIdClassificationTasks404Response) VisitGetProjectProjectIdClassificationTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProjectProjectIdPendingClassificationTasksRequestObject struct {
	ProjectId int64 `json:"project_id"`
	Params    GetProjectProjectIdPendingClassificationTasksParams
}

type GetProjectProjectIdPendingClassificationTasksResponseObject interface {
	VisitGetProjectProjectIdPendingClassificationTasksResponse(w http.ResponseWriter) error
}

type GetProjectProjectIdPendingClassificationTasks200JSONResponse = PendingClassificationTaskList

func (response GetProjectProjectIdPendingClassificationTasks200JSONResponse) VisitGetProjectProjectIdPendingClassificationTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectProjectIdPendingClassificationTasks404Response struct {
}

func (response GetProjectProjectIdPendingClassificationTasks404Response) VisitGetProjectProjectIdPendingClassificationTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetProjectsRequestObject struct {
}

type GetProjectsResponseObject interface {
	VisitGetProjectsResponse(w http.ResponseWriter) error
}

type GetProjects200JSONResponse = Projects

func (response GetProjects200JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /openapi.json)
	GetOpenapiJson(ctx context.Context, request GetOpenapiJsonRequestObject) (GetOpenapiJsonResponseObject, error)

	// (POST /project)
	PostProject(ctx context.Context, request PostProjectRequestObject) (PostProjectResponseObject, error)

	// (GET /project/{id})
	GetProjectId(ctx context.Context, request GetProjectIdRequestObject) (GetProjectIdResponseObject, error)

	// (POST /project/{project_id}/classification_task)
	PostProjectProjectIdClassificationTask(ctx context.Context, request PostProjectProjectIdClassificationTaskRequestObject) (PostProjectProjectIdClassificationTaskResponseObject, error)

	// (GET /project/{project_id}/classification_task/{id})
	GetProjectProjectIdClassificationTaskId(ctx context.Context, request GetProjectProjectIdClassificationTaskIdRequestObject) (GetProjectProjectIdClassificationTaskIdResponseObject, error)

	// (POST /project/{project_id}/classification_task/{id}/label)
	PostProjectProjectIdClassificationTaskIdLabel(ctx context.Context, request PostProjectProjectIdClassificationTaskIdLabelRequestObject) (PostProjectProjectIdClassificationTaskIdLabelResponseObject, error)

	// (POST /project/{project_id}/classification_task_label)
	PostProjectProjectIdClassificationTaskLabel(ctx context.Context, request PostProjectProjectIdClassificationTaskLabelRequestObject) (PostProjectProjectIdClassificationTaskLabelResponseObject, error)

	// (GET /project/{project_id}/classification_task_label/{id})
	GetProjectProjectIdClassificationTaskLabelId(ctx context.Context, request GetProjectProjectIdClassificationTaskLabelIdRequestObject) (GetProjectProjectIdClassificationTaskLabelIdResponseObject, error)

	// (GET /project/{project_id}/classification_tasks)
	GetProjectProjectIdClassificationTasks(ctx context.Context, request GetProjectProjectIdClassificationTasksRequestObject) (GetProjectProjectIdClassificationTasksResponseObject, error)

	// (GET /project/{project_id}/pending_classification_tasks)
	GetProjectProjectIdPendingClassificationTasks(ctx context.Context, request GetProjectProjectIdPendingClassificationTasksRequestObject) (GetProjectProjectIdPendingClassificationTasksResponseObject, error)

	// (GET /projects)
	GetProjects(ctx context.Context, request GetProjectsRequestObject) (GetProjectsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetOpenapiJson operation middleware
func (sh *strictHandler) GetOpenapiJson(w http.ResponseWriter, r *http.Request) {
	var request GetOpenapiJsonRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetOpenapiJson(ctx, request.(GetOpenapiJsonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOpenapiJson")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetOpenapiJsonResponseObject); ok {
		if err := validResponse.VisitGetOpenapiJsonResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProject operation middleware
func (sh *strictHandler) PostProject(w http.ResponseWriter, r *http.Request) {
	var request PostProjectRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body PostProjectFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProject(ctx, request.(PostProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectResponseObject); ok {
		if err := validResponse.VisitPostProjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectId operation middleware
func (sh *strictHandler) GetProjectId(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetProjectIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectId(ctx, request.(GetProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectIdResponseObject); ok {
		if err := validResponse.VisitGetProjectIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectProjectIdClassificationTask operation middleware
func (sh *strictHandler) PostProjectProjectIdClassificationTask(w http.ResponseWriter, r *http.Request, projectId int64) {
	var request PostProjectProjectIdClassificationTaskRequestObject

	request.ProjectId = projectId
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/json") {

		var body PostProjectProjectIdClassificationTaskJSONRequestBody
		if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
			return
		}
		request.JSONBody = &body
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-www-form-urlencoded") {
		if err := r.ParseForm(); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
			return
		}
		var body PostProjectProjectIdClassificationTaskFormdataRequestBody
		if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
			sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
			return
		}
		request.FormdataBody = &body
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectProjectIdClassificationTask(ctx, request.(PostProjectProjectIdClassificationTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectProjectIdClassificationTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectProjectIdClassificationTaskResponseObject); ok {
		if err := validResponse.VisitPostProjectProjectIdClassificationTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectProjectIdClassificationTaskId operation middleware
func (sh *strictHandler) GetProjectProjectIdClassificationTaskId(w http.ResponseWriter, r *http.Request, projectId int64, id int64) {
	var request GetProjectProjectIdClassificationTaskIdRequestObject

	request.ProjectId = projectId
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectIdClassificationTaskId(ctx, request.(GetProjectProjectIdClassificationTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectIdClassificationTaskId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectIdClassificationTaskIdResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectIdClassificationTaskIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectProjectIdClassificationTaskIdLabel operation middleware
func (sh *strictHandler) PostProjectProjectIdClassificationTaskIdLabel(w http.ResponseWriter, r *http.Request, projectId int64, id int64) {
	var request PostProjectProjectIdClassificationTaskIdLabelRequestObject

	request.ProjectId = projectId
	request.Id = id

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body PostProjectProjectIdClassificationTaskIdLabelFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectProjectIdClassificationTaskIdLabel(ctx, request.(PostProjectProjectIdClassificationTaskIdLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectProjectIdClassificationTaskIdLabel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectProjectIdClassificationTaskIdLabelResponseObject); ok {
		if err := validResponse.VisitPostProjectProjectIdClassificationTaskIdLabelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostProjectProjectIdClassificationTaskLabel operation middleware
func (sh *strictHandler) PostProjectProjectIdClassificationTaskLabel(w http.ResponseWriter, r *http.Request, projectId int64) {
	var request PostProjectProjectIdClassificationTaskLabelRequestObject

	request.ProjectId = projectId

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body PostProjectProjectIdClassificationTaskLabelFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectProjectIdClassificationTaskLabel(ctx, request.(PostProjectProjectIdClassificationTaskLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectProjectIdClassificationTaskLabel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostProjectProjectIdClassificationTaskLabelResponseObject); ok {
		if err := validResponse.VisitPostProjectProjectIdClassificationTaskLabelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectProjectIdClassificationTaskLabelId operation middleware
func (sh *strictHandler) GetProjectProjectIdClassificationTaskLabelId(w http.ResponseWriter, r *http.Request, projectId int64, id int64) {
	var request GetProjectProjectIdClassificationTaskLabelIdRequestObject

	request.ProjectId = projectId
	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectIdClassificationTaskLabelId(ctx, request.(GetProjectProjectIdClassificationTaskLabelIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectIdClassificationTaskLabelId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectIdClassificationTaskLabelIdResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectIdClassificationTaskLabelIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectProjectIdClassificationTasks operation middleware
func (sh *strictHandler) GetProjectProjectIdClassificationTasks(w http.ResponseWriter, r *http.Request, projectId int64, params GetProjectProjectIdClassificationTasksParams) {
	var request GetProjectProjectIdClassificationTasksRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectIdClassificationTasks(ctx, request.(GetProjectProjectIdClassificationTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectIdClassificationTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectIdClassificationTasksResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectIdClassificationTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectProjectIdPendingClassificationTasks operation middleware
func (sh *strictHandler) GetProjectProjectIdPendingClassificationTasks(w http.ResponseWriter, r *http.Request, projectId int64, params GetProjectProjectIdPendingClassificationTasksParams) {
	var request GetProjectProjectIdPendingClassificationTasksRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectIdPendingClassificationTasks(ctx, request.(GetProjectProjectIdPendingClassificationTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectIdPendingClassificationTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectProjectIdPendingClassificationTasksResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectIdPendingClassificationTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjects operation middleware
func (sh *strictHandler) GetProjects(w http.ResponseWriter, r *http.Request) {
	var request GetProjectsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjects(ctx, request.(GetProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjects")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProjectsResponseObject); ok {
		if err := validResponse.VisitGetProjectsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa32/bNhD+VwhuwF7kyG2KodNb9wNDhgIx1r4VgcFIZ5utRKok1TQz9L8PJCVZqkmZ",
	"sh0HG/qU2CSPx/u++3g8eItTXpScAVMSJ1tcEkEKUCDMpwVZg/6bgUwFLRXlDCf4/QZQSdaAWFXcg8AR",
	"pvrrzxWIRxxhRgrACdYzcIRluoGCaCMrLgqicIIpUz+/whEuKKNFVeBkHmH1WIIdgrUx+XW25rPm28qu",
	"qOvIePSO/uPxyjqE+AoJkFWuJCpBoMYTn5NLqe2Fefoi1NM6wgJkyZkEE8nfOFvlNFVuvwVIXokUEMkF",
	"kOwRwVcqlcQR3gDJGjDe8pTYNduerz8KWOEE/xDvcIztqIy7FbVx6G/IqACXD2+QaMYoZ0hxpDaAVoIz",
	"BSyzWD9QtTFfpwKIgqzz+axO1i0MNmg5kZKuqJ3wnshP+luS57crnHwYN7sAllG2dpiooy0uBS9BKGrB",
	"yck95Eua6f9H4d3xUMDnigrIcPJht/yuYwe//6gDXd/VkeMUb/UCk20DN5rILokakDAjCmaKFjrSjXmp",
	"BGVrXEc43OnI+tmbvrNSCq79PT4ENMMDK+1mUf9Q++FxBodKtR+bjCjDJKqgkIco5QS93ZsIQR7NZ65I",
	"fvC8lfvAxp/WRtjBboWfk8kWcwYn03pqUAw9DUBun4YYQHEPmd7dfCJZRvVcki8Gs8Z8+KO10MNjF7I8",
	"L5aUlZVyclSP8kq5h7/NyM7SYF3UP4ITNE8sPAnrSyiXPozst7B54yB9X6QdIbGX2KHtzaxoYMzlyw6b",
	"vvjcPyqn7piIuGnybVQmS6nTvf7F0nlXCepybjTPTtfcp86DSZp+fM48jewHZN7BS8GL3xnuhjEBvfAV",
	"4c37Y0h5SCsmFwryhOvW6qUjoGGKZZjkkK3DxLERlfshLXsjYTxpwNk7xH7G6q8oW3FzMKpyPfYOCsIU",
	"TdE7YBK0Sn0BIW21/eJqrs3yEhgpKU7w9dX86qXOJKI2xrG4Gbv6KC2ca3BU7X+CkqYkvy2BvVncIFlC",
	"2uGAzQ7C/H+T2em31uxf0gwPHigv53NDPVPzm81IWeaNrbj1Y1fSD2MwJFLj/fXV+/7AjBYlF5buRG1w",
	"gtdUbar7q5QX8RrUJ8riT5TNmtVtDK6b18v+q8l9bDs7LnvJxaUjevbulYggBg+onf5t0BZcqkU3pkkK",
	"Uv3Ks8eRYH2dPTw8zHTaziqRA0t5Bln4g2hYFNTD5FCignoPuheToAuivTvk7eOv3GXH9fzaZ7TzMu6e",
	"nkN04i3N6sP8bmbv3qBr+gUYuvndxfHmBDfmaup1Mz5sbQfAcK9rABipGYY32mf5+J14d2IqnYCHPzJ1",
	"hF/NX3maN75VKOMgEePKNiD20Npd9XWcDlR/qdryKiDZhkuRWTqSeB2ijks7BONBgXIOrENEYBrM3keY",
	"jv/ZtcW5z2Vlxl+FHRAeu9BJoelipHPkl8MLuubdxHwIlDfHWSZJ3Uh+BKrgOTMk+k/q7LR2jY+kQUCO",
	"KXOQhRNV2rAy7l7pbsE2Ffwp9AzT75vsbdMn/F+R9AJV4q4BEyTdT5kpvnSoysxo9vm0+hmzZnkgYQ5W",
	"OKjtiB+TJ8+TJXcXffF42wiXLU1G3fAXJn7ET34jBTHzhFrDrD9XxWGC9b3seCKyTUBvqmB67Jwom/Io",
	"SkpEpOQpNZllXCLeDk0QK+Vz8NEF/M6J2Py4InCe+cnDpZnYwB1IRIMZXTPIkOI9vEIaEZpj7KcQijXv",
	"v+VxVBt5PZ5IOe9b4Tvzju4FjBHwEJJPQMQAfuVUKsRXqFvhZ47ET981lL7o7fnZ/vYGxJeWpZXIcYI3",
	"SpVJHOc8JfmGS5W8nr+ex6SkMa7v6n8DAAD//9//XyU+JgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
